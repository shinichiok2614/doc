"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9866],{3999:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=e(4848),r=e(8453);const o={},i=void 0,s={id:"jh/ckeditor/ckeditor",title:"ckeditor",description:"",source:"@site/docs/jh/ckeditor/ckeditor.md",sourceDirName:"jh/ckeditor",slug:"/jh/ckeditor/",permalink:"/doc/docs/jh/ckeditor/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/jh/ckeditor/ckeditor.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"browser-sync",permalink:"/doc/docs/jh/browserSync/browser-sync"},next:{title:"cors",permalink:"/doc/docs/jh/cors/"}},p={},d=[];function c(n){const t={code:"code",pre:"pre",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",metastring:'title="readonly"',children:'import React, { useEffect, useState } from \'react\';\nimport { Translate } from \'react-jhipster\';\nimport { FontAwesomeIcon } from \'@fortawesome/react-fontawesome\';\nimport { Link } from \'react-router-dom\';\nimport { Button } from \'reactstrap\';\nimport { CKEditor } from \'@ckeditor/ckeditor5-react\';\nimport ClassicEditor from \'@ckeditor/ckeditor5-build-classic\';\nimport \'./ParagraphTable.css\';\n\nconst ParagraphTable = ({ paragraphList, openFile, loading, postId }) => {\n  const [contentMap, setContentMap] = useState({});\n\n  useEffect(() => {\n    if (paragraphList && paragraphList.length > 0) {\n      const initialContentMap = {};\n      paragraphList.forEach(paragraph => {\n        if (paragraph.content) {\n          initialContentMap[paragraph.id] = paragraph.content; // Use content directly\n        }\n      });\n      setContentMap(initialContentMap);\n    }\n  }, [paragraphList]);\n\n  return (\n    <div className="ParagraphTable">\n      {paragraphList && paragraphList.length > 0\n        ? paragraphList.map(paragraph => (\n            <div key={`entity-${paragraph.id}`} className="paragraph-container">\n              {paragraph.image && paragraph.imageContentType && (\n                <div className="image-container">\n                  <a\n                    onClick={openFile(\n                      paragraph.imageContentType,\n                      paragraph.image,\n                    )}\n                  >\n                    <img\n                      src={`data:${paragraph.imageContentType};base64,${paragraph.image}`}\n                      alt={paragraph.caption}\n                      className="centered-image"\n                    />\n                  </a>\n                </div>\n              )}\n              <div className="caption-container">{paragraph.caption}</div>\n\n              <div id={`editorjs-${paragraph.id}`} className="editor-container">\n                {contentMap[paragraph.id] && (\n                  <CKEditor\n                    editor={ClassicEditor}\n                    data={contentMap[paragraph.id]} // Directly use content without parsing\n                    config={{\n                      toolbar: [], // Hide toolbar for read-only mode\n                    }}\n                    onReady={editor => {\n                      // Code runs when editor is ready\n                      editor.enableReadOnlyMode(\'read-only-mode\');\n                    }}\n                  />\n                )}\n              </div>\n\n              <div className="btn-group flex-btn-group-container">\n                <Button\n                  tag={Link}\n                  to={`/paragrapheditupdatepage/${paragraph.id}?postId=${postId}`}\n                  color="primary"\n                  size="sm"\n                  data-cy="entityEditButton"\n                >\n                  <FontAwesomeIcon icon="pencil-alt" />{\' \'}\n                  <span className="d-none d-md-inline">\n                    <Translate contentKey="entity.action.edit">Edit</Translate>\n                  </span>\n                </Button>\n                <Button\n                  onClick={() =>\n                    (window.location.href = `/paragraph/${paragraph.id}/delete`)\n                  }\n                  color="danger"\n                  size="sm"\n                  data-cy="entityDeleteButton"\n                >\n                  <FontAwesomeIcon icon="trash" />{\' \'}\n                  <span className="d-none d-md-inline">\n                    <Translate contentKey="entity.action.delete">\n                      Delete\n                    </Translate>\n                  </span>\n                </Button>\n              </div>\n            </div>\n          ))\n        : !loading && (\n            <div className="alert alert-warning">\n              <Translate contentKey="seaportApp.paragraph.home.notFound">\n                No Paragraphs found\n              </Translate>\n            </div>\n          )}\n    </div>\n  );\n};\n\nexport default ParagraphTable;\n'})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",metastring:'title="edit"',children:"import React, { useState, useEffect } from 'react';\nimport { Link, useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { Button, Row, Col, FormText } from 'reactstrap';\nimport {\n  isNumber,\n  Translate,\n  translate,\n  ValidatedField,\n  ValidatedForm,\n  ValidatedBlobField,\n} from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport {\n  convertDateTimeFromServer,\n  convertDateTimeToServer,\n  displayDefaultDateTime,\n} from 'app/shared/util/date-utils';\nimport { mapIdList } from 'app/shared/util/entity-utils';\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\n\nimport { IPost } from 'app/shared/model/post.model';\nimport {\n  getEntity as getPost,\n  getEntities as getPosts,\n} from 'app/entities/post/post.reducer';\nimport { IParagraph } from 'app/shared/model/paragraph.model';\nimport {\n  reset,\n  getEntity,\n  updateEntity,\n  createEntity,\n} from 'app/entities/paragraph/paragraph.reducer';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\nexport const ParagraphEditUpdate = () => {\n  const dispatch = useAppDispatch();\n\n  const navigate = useNavigate();\n\n  const { id } = useParams<'id'>();\n  const isNew = id === undefined || id === 'new';\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const postId = searchParams.get('postId');\n  const posts = useAppSelector(state => state.post.entities);\n  const postEntity = useAppSelector(state => state.post.entity);\n  const paragraphEntity = useAppSelector(state => state.paragraph.entity);\n  const loading = useAppSelector(state => state.paragraph.loading);\n  const updating = useAppSelector(state => state.paragraph.updating);\n  const updateSuccess = useAppSelector(state => state.paragraph.updateSuccess);\n  const handleClose = () => {\n    navigate(`/paragrapheditpage/${postId}`);\n  };\n\n  useEffect(() => {\n    if (isNew) {\n      dispatch(reset());\n    } else {\n      dispatch(getEntity(id));\n    }\n\n    console.log('Paragraph ID:', id);\n    console.log('Post ID:', postId);\n    // dispatch(getPosts({}));\n    dispatch(getPost(postId));\n  }, []);\n\n  useEffect(() => {\n    if (updateSuccess) {\n      handleClose();\n    }\n  }, [updateSuccess]);\n\n  const [content, setContent] = useState('');\n  const [isContentLoaded, setIsContentLoaded] = useState(false);\n\n  useEffect(() => {\n    if (!isNew && paragraphEntity.content) {\n      setContent(paragraphEntity.content);\n      setIsContentLoaded(true);\n    } else if (isNew) {\n      setIsContentLoaded(true); // \u0110\u1ed1i v\u1edbi c\xe1c th\u1ef1c th\u1ec3 m\u1edbi, kh\xf4ng c\u1ea7n t\u1ea3i n\u1ed9i dung hi\u1ec7n c\xf3\n    }\n  }, [paragraphEntity.content, isNew]);\n\n  const saveEntity = values => {\n    if (values.id !== undefined && typeof values.id !== 'number') {\n      values.id = Number(values.id);\n    }\n    values.createdAt = convertDateTimeToServer(values.createdAt);\n    values.updatedAt = convertDateTimeToServer(values.updatedAt);\n\n    const entity = {\n      ...paragraphEntity,\n      ...values,\n      content,\n      paragraph: postEntity,\n    };\n\n    if (isNew) {\n      dispatch(createEntity(entity));\n    } else {\n      dispatch(updateEntity(entity));\n    }\n  };\n\n  const defaultValues = () =>\n    isNew\n      ? {\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        }\n      : {\n          ...paragraphEntity,\n          createdAt: convertDateTimeFromServer(paragraphEntity.createdAt),\n          updatedAt: convertDateTimeFromServer(paragraphEntity.updatedAt),\n          paragraph: paragraphEntity?.paragraph?.id,\n        };\n\n  return (\n    <div>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <h2\n            id=\"seaportApp.paragraph.home.createOrEditLabel\"\n            data-cy=\"ParagraphCreateUpdateHeading\"\n          >\n            <Translate contentKey=\"seaportApp.paragraph.home.createOrEditLabel\">\n              Create or edit a Paragraph\n            </Translate>\n          </h2>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          {loading ? (\n            <p>Loading...</p>\n          ) : (\n            <ValidatedForm\n              defaultValues={defaultValues()}\n              onSubmit={saveEntity}\n            >\n              {!isNew ? (\n                <ValidatedField\n                  name=\"id\"\n                  required\n                  readOnly\n                  id=\"paragraph-id\"\n                  label={translate('global.field.id')}\n                  validate={{ required: true }}\n                />\n              ) : null}\n              <ValidatedBlobField\n                label={translate('seaportApp.paragraph.image')}\n                id=\"paragraph-image\"\n                name=\"image\"\n                data-cy=\"image\"\n                isImage\n                accept=\"image/*\"\n              />\n              <ValidatedField\n                label={translate('seaportApp.paragraph.caption')}\n                id=\"paragraph-caption\"\n                name=\"caption\"\n                data-cy=\"caption\"\n                type=\"text\"\n              />\n              {isContentLoaded && (\n                <CKEditor\n                  editor={ClassicEditor}\n                  data={content}\n                  onChange={(event, editor) => {\n                    const data = editor.getData();\n                    setContent(data);\n                  }}\n                />\n              )}\n              <Button\n                color=\"primary\"\n                id=\"save-entity\"\n                data-cy=\"entityCreateSaveButton\"\n                type=\"submit\"\n                disabled={updating}\n              >\n                <FontAwesomeIcon icon=\"save\" />\n                &nbsp;\n                <Translate contentKey=\"entity.action.save\">Save</Translate>\n              </Button>\n            </ValidatedForm>\n          )}\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default ParagraphEditUpdate;\n"})})]})}function l(n={}){const{wrapper:t}={...(0,r.R)(),...n.components};return t?(0,a.jsx)(t,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},8453:(n,t,e)=>{e.d(t,{R:()=>i,x:()=>s});var a=e(6540);const r={},o=a.createContext(r);function i(n){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function s(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),a.createElement(o.Provider,{value:t},n.children)}}}]);