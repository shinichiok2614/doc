"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[289],{9495:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=n(4848),r=n(8453);const o={},s=void 0,i={id:"jh/editorjs/paragraph-update",title:"paragraph-update",description:"",source:"@site/docs/jh/editorjs/paragraph-update.md",sourceDirName:"jh/editorjs",slug:"/jh/editorjs/paragraph-update",permalink:"/doc/docs/jh/editorjs/paragraph-update",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/jh/editorjs/paragraph-update.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"component",permalink:"/doc/docs/jh/editorjs/component"},next:{title:"getPersonByUser",permalink:"/doc/docs/jh/getPerson/getPersonByUser"}},p={},d=[];function c(e){const t={code:"code",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",metastring:'title="paragraph-update.tsx"',children:'import React, { useState, useEffect } from \'react\';\nimport { Link, useNavigate, useParams } from \'react-router-dom\';\nimport { Button, Row, Col, FormText } from \'reactstrap\';\nimport { isNumber, Translate, translate, ValidatedField, ValidatedForm, ValidatedBlobField } from \'react-jhipster\';\nimport { FontAwesomeIcon } from \'@fortawesome/react-fontawesome\';\n\nimport { convertDateTimeFromServer, convertDateTimeToServer, displayDefaultDateTime } from \'app/shared/util/date-utils\';\nimport { mapIdList } from \'app/shared/util/entity-utils\';\nimport { useAppDispatch, useAppSelector } from \'app/config/store\';\n\nimport { IUser } from \'app/shared/model/user.model\';\nimport { getUsers } from \'app/modules/administration/user-management/user-management.reducer\';\nimport { IParagraph } from \'app/shared/model/paragraph.model\';\nimport { getEntity, updateEntity, createEntity, reset } from \'./paragraph.reducer\';\nimport EditorComponent from \'app/component/EditorComponent\';\n\nexport const ParagraphUpdate = () => {\n  const dispatch = useAppDispatch();\n\n  const navigate = useNavigate();\n\n  const { id } = useParams<\'id\'>();\n  const isNew = id === undefined;\n  const [content, setContent] = useState({});\n\n  const users = useAppSelector(state => state.userManagement.users);\n  const paragraphEntity = useAppSelector(state => state.paragraph.entity);\n  const loading = useAppSelector(state => state.paragraph.loading);\n  const updating = useAppSelector(state => state.paragraph.updating);\n  const updateSuccess = useAppSelector(state => state.paragraph.updateSuccess);\n  const [isContentLoaded, setIsContentLoaded] = useState(false);\n\n  const handleClose = () => {\n    navigate(\'/paragraph\');\n  };\n\nuseEffect(() => {\n  if (!isNew && paragraphEntity.content) {\n    try {\n      const parsedContent = JSON.parse(paragraphEntity.content);\n      if (parsedContent && typeof parsedContent === \'object\' && parsedContent.blocks) {\n        setContent(parsedContent);\n        setIsContentLoaded(true);\n      } else {\n        console.error(\'Invalid content structure\', parsedContent);\n      }\n    } catch (e) {\n      console.error(\'Failed to parse paragraph content\', e);\n    }\n  } else if (isNew) {\n    setIsContentLoaded(true); // For new entities, no need to load existing content\n  }\n}, [paragraphEntity.content, isNew]);\n\n  useEffect(() => {\n    if (isNew) {\n      dispatch(reset());\n    } else {\n      dispatch(getEntity(id));\n    }\n\n    dispatch(getUsers({}));\n  }, []);\n\n  useEffect(() => {\n    if (updateSuccess) {\n      handleClose();\n    }\n  }, [updateSuccess]);\n\n  // eslint-disable-next-line complexity\n  const saveEntity = values => {\n    if (values.id !== undefined && typeof values.id !== \'number\') {\n      values.id = Number(values.id);\n    }\n    values.modifiedAt = convertDateTimeToServer(values.modifiedAt);\n    const entity = {\n      ...paragraphEntity,\n      ...values,\n      content: JSON.stringify(content),\n      user: users.find(it => it.id.toString() === values.user?.toString()),\n    };\n\n    if (isNew) {\n      dispatch(createEntity(entity));\n    } else {\n      dispatch(updateEntity(entity));\n    }\n  };\n\n  const defaultValues = () =>\n    isNew\n      ? {\n          modifiedAt: displayDefaultDateTime(),\n        }\n      : {\n          ...paragraphEntity,\n          modifiedAt: convertDateTimeFromServer(paragraphEntity.modifiedAt),\n          user: paragraphEntity?.user?.id,\n        };\n\n  return (\n    <div>\n      <Row className="justify-content-center">\n        <Col md="8">\n          <h2 id="seaportApp.paragraph.home.createOrEditLabel" data-cy="ParagraphCreateUpdateHeading">\n            <Translate contentKey="seaportApp.paragraph.home.createOrEditLabel">Create or edit a Paragraph</Translate>\n          </h2>\n        </Col>\n      </Row>\n      <Row className="justify-content-center">\n        <Col md="8">\n          {loading ? (\n            <p>Loading...</p>\n          ) : (\n            <ValidatedForm defaultValues={defaultValues()} onSubmit={saveEntity}>\n              {!isNew ? (\n                <ValidatedField\n                  name="id"\n                  required\n                  readOnly\n                  id="paragraph-id"\n                  label={translate(\'global.field.id\')}\n                  validate={{ required: true }}\n                />\n              ) : null}\n              <ValidatedBlobField\n                label={translate(\'seaportApp.paragraph.image\')}\n                id="paragraph-image"\n                name="image"\n                data-cy="image"\n                isImage\n                accept="image/*"\n              />\n              {isContentLoaded && <EditorComponent data={content} onChange={setContent} />}\n              <ValidatedField\n                label={translate(\'seaportApp.paragraph.modifiedAt\')}\n                id="paragraph-modifiedAt"\n                name="modifiedAt"\n                data-cy="modifiedAt"\n                type="datetime-local"\n                placeholder="YYYY-MM-DD HH:mm"\n              />\n              <ValidatedField id="paragraph-user" name="user" data-cy="user" label={translate(\'seaportApp.paragraph.user\')} type="select">\n                <option value="" key="0" />\n                {users\n                  ? users.map(otherEntity => (\n                      <option value={otherEntity.id} key={otherEntity.id}>\n                        {otherEntity.id}\n                      </option>\n                    ))\n                  : null}\n              </ValidatedField>\n              <Button tag={Link} id="cancel-save" data-cy="entityCreateCancelButton" to="/paragraph" replace color="info">\n                <FontAwesomeIcon icon="arrow-left" />\n                &nbsp;\n                <span className="d-none d-md-inline">\n                  <Translate contentKey="entity.action.back">Back</Translate>\n                </span>\n              </Button>\n              &nbsp;\n              <Button color="primary" id="save-entity" data-cy="entityCreateSaveButton" type="submit" disabled={updating}>\n                <FontAwesomeIcon icon="save" />\n                &nbsp;\n                <Translate contentKey="entity.action.save">Save</Translate>\n              </Button>\n            </ValidatedForm>\n          )}\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default ParagraphUpdate;\n'})})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(6540);const r={},o=a.createContext(r);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);